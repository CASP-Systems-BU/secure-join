#include "Where_Test.h"
using namespace secJoin;

void Where_csv_Test(const oc::CLP& cmd)
{
    std::string rootPath(SEC_JOIN_ROOT_DIRECTORY);
    std::string visaCsvPath = rootPath + "/tests/tables/visa.csv";
    std::string bankCsvPath = rootPath + "/tests/tables/bank.csv";
    std::string visaMetaDataPath = rootPath + "/tests/tables/visa_meta.txt";
    std::string clientMetaDataPath = rootPath + "/tests/tables/bank_meta.txt";
    
    // literals, literalType, opInfo is generated by Java
    std::vector<std::string> literals = {"PAN", "Risk_Score", "Date", "PAN", "Balance", 
        "Risk_Score", "50", "51643999233877"};
    std::vector<std::string> literalsType = { "Col", "Col", "Col", "Col", "Col", 
        "Col", "Number", "Number"};
    // std::vector<i64> opInfo{2, 0, 3, 4, 1, 0, 4, 5, 1, 0, 2, 1, 4, 4, 5,
    //      5, 1, 8, 7, 8, 6, 9, 6, 0, 7, 10, 3, 9, 10, 11, -1};
    std::vector<i64> opInfo{    2, 0, 3, 4, 1, 0, 4, 5, 1, 0, 2, 1, 4, 3, 6, 5, 6, 
        8, 1, 0, 7, 9, 3, 8, 9, 10, -1};
    bool printSteps = cmd.isSet("print");
    bool mock = !cmd.isSet("noMock");



    std::vector<u64> joinCols, selectCols, groupByCols, avgCols;
    std::vector<ArrGate> gates;
    parseColsArray(joinCols, selectCols, groupByCols, avgCols, gates, opInfo, printSteps);

    u64 lRowCount = 0, rRowCount = 0, lColCount = 0, rColCount = 0;

    std::vector<ColumnInfo> lColInfo, rColInfo;
    getFileInfo(visaMetaDataPath, lColInfo, lRowCount, lColCount);
    getFileInfo(clientMetaDataPath, rColInfo, rRowCount, rColCount);
    u64 totalColCount = lColCount + rColCount;

    Table L, R;

    L.init( lRowCount, lColInfo);
    R.init( rRowCount, rColInfo);

    populateTable(L, visaCsvPath, lRowCount);
    populateTable(R, bankCsvPath, rRowCount);

    // Get Select Col Refs
    std::vector<secJoin::ColRef> selectColRefs = getSelectColRef(selectCols, L, R, lColCount, rColCount);

    // if (printSteps)
    // {
    //     std::cout << "L\n" << L << std::endl;
    //     std::cout << "R\n" << R << std::endl;
    // }

    PRNG prng(oc::ZeroBlock);
    std::array<Table, 2> Ls, Rs;
    share(L, Ls, prng);
    share(R, Rs, prng);

    OmJoin join0, join1;

    join0.mInsecurePrint = printSteps;
    join1.mInsecurePrint = printSteps;

    join0.mInsecureMockSubroutines = mock;
    join1.mInsecureMockSubroutines = mock;


    PRNG prng0(oc::ZeroBlock);
    PRNG prng1(oc::OneBlock);
    auto sock = coproto::LocalAsyncSocket::makePair();

    CorGenerator ole0, ole1;
    ole0.init(sock[0].fork(), prng0, 0, 1 << 16, mock);
    ole1.init(sock[1].fork(), prng1, 1, 1 << 16, mock);

    Table tempOut[2], out[2];

    u64 lJoinColIndex = joinCols[0];
    u64 rJoinColIndex = getRColIndex(joinCols[1], lColCount, rColCount);

    auto joinExp = join(L[lJoinColIndex], R[rJoinColIndex], selectColRefs);

    std::vector<secJoin::ColRef> lSelectColRefs = getSelectColRef(selectCols, Ls[0], Rs[0], lColCount, rColCount);
    std::vector<secJoin::ColRef> rSelectColRefs = getSelectColRef(selectCols, Ls[1], Rs[1], lColCount, rColCount);

    auto r = macoro::sync_wait(macoro::when_all_ready(
        join0.join(Ls[0][lJoinColIndex], Rs[0][rJoinColIndex], lSelectColRefs, tempOut[0], prng0, ole0, sock[0]),
        join1.join(Ls[1][lJoinColIndex], Rs[1][rJoinColIndex], rSelectColRefs, tempOut[1], prng1, ole1, sock[1])
    ));
    std::get<0>(r).result();
    std::get<1>(r).result();

    auto res = reveal(tempOut[0], tempOut[1]);

    if (res != joinExp)
    {
        std::cout << "exp \n" << joinExp << std::endl;
        std::cout << "act \n" << res << std::endl;
        // std::cout << "ful \n" << reveal(out[0], out[1], false) << std::endl;
        throw RTE_LOC;
    }

    // Create a new mapping and store the new mapping in the cState
    std::unordered_map<u64, u64> map;
    createNewMapping(map, selectCols);
    std::cout << "Printing Map" << std::endl;
    for (auto i : map) 
        std::cout << i.first << " \t\t\t " << i.second << std::endl; 

    Where wh;
    Gmw gmw;
    u64 gmwInIdx = 0;
    // gmw.init(rows, cd, ole);
    // auto cd = wh.genWhCircuit(tempOut[0], gates, literals, literalsType, totalColCount, map);
    
    
    std::cout << "Where Over" << std::endl;
    

    
}

